apiVersion: v1
data:
  Dockerfile: |
    FROM python:3.8-slim

    WORKDIR /app

    COPY requirements.txt /app/

    RUN pip install --no-cache-dir -r requirements.txt

    COPY . /app/

    EXPOSE 8501

    CMD ["streamlit", "run", "streamlit_frontend.py"]
  requirements.txt: streamlit
  streamlit_frontend.py: "import streamlit as st\nimport requests\n\n# Title for the app\nst.title(\"Personalized Health Tracker\")\n\n# Tabs for navigation\ntab1, tab2 = st.tabs([\"Quick BMI Check\", \"User Profiles\"])\n\n# Update service URLs to point to the Kubernetes services\n#USER_SERVICE_URL = \"http://user-service:5001\"\n#BMI_SERVICE_URL = \"http://bmi-service:5002\"\n#EXERCISE_SERVICE_URL = \"http://exercise-service:5003\"\n\nBMI_SERVICE_URL = f\"http://localhost:5002/calculate_bmi\"\nUSER_SERVICE_URL = f\"http://localhost:5001/\"\nEXERCISE_SERVICE_URL = f\"http://10.99.211.41:31286/recommend_exercises\"\n\n# Tab 1: Quick BMI Check\nwith tab1:\n    st.header(\"Quick BMI Check\")\n    weight = st.number_input(\"Enter your weight (in kg):\", min_value=0.1, step=0.1, key=\"quick_weight\")\n    height = st.number_input(\"Enter your height (in m):\", min_value=0.1, step=0.1, key=\"quick_height\")\n\n    if st.button(\"Check BMI\", key=\"quick_bmi\"):\n        if weight > 0 and height > 0:\n            try:\n                # Calculate BMI\n                #bmi_response = requests.post(\"http://bmi-service:5002/calculate_bmi\", json={\n                bmi_response = requests.post(BMI_SERVICE_URL, json={\n                    \"weight\": weight,\n                    \"height\": height\n                })\n\n                if bmi_response.status_code == 200:\n                    bmi_data = bmi_response.json()\n                    bmi = bmi_data.get(\"bmi\")\n                    advice = bmi_data.get(\"advice\")\n\n                    st.success(f\"Your BMI is {bmi:.2f} ({advice})\")\n\n                    # Fetch Exercise Recommendations\n                    #exercise_response = requests.post(\"http://exercise-service:5003/recommend_exercises\", json={\"bmi\": bmi})\n                    exercise_response = requests.post(EXERCISE_SERVICE_URL, json={\"bmi\": bmi})\n                    if exercise_response.status_code == 200:\n                        exercise_data = exercise_response.json()\n                        st.write(\"Exercise Recommendations:\")\n                        for key, value in exercise_data.items():\n                            st.write(f\"{key.replace('_', ' ').title()}: {value}\")\n                    else:\n                        st.error(\"Failed to fetch exercise recommendations.\")\n                else:\n                    st.error(\"Failed to calculate BMI.\")\n\n            except Exception as e:\n                st.error(f\"Error: {e}\")\n        else:\n            st.warning(\"Please enter valid weight and height!\")\n\n# Tab 2: User Profiles\nwith tab2:\n    st.header(\"Create and View Profiles\")\n\n    # Create Profile Section\n    st.subheader(\"Create Profile\")\n    name = st.text_input(\"Name\")\n    age = st.number_input(\"Age\", min_value=0, step=1, format=\"%d\")\n    gender = st.selectbox(\"Gender\", [\"Male\", \"Female\", \"Other\"], key=\"profile_gender\")\n    weight = st.number_input(\"Weight (kg)\", min_value=0.1, step=0.1, key=\"profile_weight\")\n    height = st.number_input(\"Height (m)\", min_value=0.1, step=0.1, key=\"profile_height\")\n\n    if st.button(\"Save Profile\"):\n        if name and age > 0 and weight > 0 and height > 0:\n            try:\n                # Save the user profile\n                response = requests.post(USER_SERVICE_URL + \"/add_user\", json={\n                    \"name\": name,\n                    \"age\": age,\n                    \"gender\": gender,\n                    \"weight\": weight,\n                    \"height\": height\n                })\n\n                if response.status_code == 201:\n                    result = response.json()\n                    st.success(\"Profile saved successfully!\")\n                    st.write(f\"Calculated BMI: {result['bmi']}\")\n                    st.write(\"Exercise Recommendations:\")\n                    for key, value in result['exercise_recommendations'].items():\n                        st.write(f\"{key.replace('_', ' ').title()}: {value}\")\n                else:\n                    st.error(f\"Error: {response.json().get('error')}\")\n            except Exception as e:\n                st.error(f\"Could not connect to the User Profile service: {e}\")\n        else:\n            st.warning(\"Please fill in all fields!\")\n\n    # View Profiles Section\n    st.subheader(\"View Profiles\")\n    try:\n        response = requests.get(USER_SERVICE_URL + \"/get_users\")\n        if response.status_code == 200:\n            profiles = response.json()\n            for profile in profiles:\n                st.write(\"---\")\n                st.subheader(profile[\"name\"])\n                st.write(f\"Age: {profile['age']}\")\n                st.write(f\"Gender: {profile['gender']}\")\n                st.write(f\"Weight: {profile['weight']} kg\")\n                st.write(f\"Height: {profile['height']} m\")\n                st.write(f\"BMI: {profile['bmi']}\")\n                st.write(\"Exercise Recommendations:\")\n                for key, value in profile[\"exercise_recommendations\"].items():\n                    st.write(f\"{key.replace('_', ' ').title()}: {value}\")\n                \n                # Delete Profile Button\n                if st.button(f\"Delete Profile: {profile['name']}\"):\n                    try:\n                        delete_response = requests.delete(USER_SERVICE_URL + \"/delete_user\", json={\"name\": profile[\"name\"]})\n                        if delete_response.status_code == 200:\n                            st.success(f\"Profile {profile['name']} deleted successfully.\")\n                        else:\n                            st.error(f\"Error: {delete_response.json().get('error')}\")\n                    except Exception as e:\n                        st.error(f\"Failed to delete profile: {e}\")\n        else:\n            st.error(\"Failed to fetch user profiles.\")\n    except Exception as e:\n        st.error(f\"Error: {e}\")\n"
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: frontend
  name: frontend-cm0
